Files
==================================================================
The dataset file contains benchmark and independent test datasets.

The feature file contains traditional features of proteins, including amino acid composition (AAC), dipeptide composition (DC), tripeptide composition (TC), position specific scoring matrix (PSSM), and Composition-transition-distribution (CTD).

The model file contains various deep neural networks, inclduing CNN, RNN, CNN-RNN, DNN and the hybrid model integrating RNN and DNN.


Usage
==================================================================
By using autoBioSeqpy (version 2.0 in this repository), users can use the following commands to complete model training and test dataset prediction. For example, the command below is the case of using the CNN architecture, splitting the training dataset into 90%-10% training-testing pair for modeling and testing:

```python running.py --dataType protein --dataEncodingType dict --dataTrainFilePaths examples/Druggableproteins/data/positive_train.txt examples/Druggableproteins/data/negative_train.txt --dataTrainLabel 1 0 --modelLoadFile examples/Druggableproteins/model/CNN_dict.py --dataTrainModelInd 0 0 --savePrediction 1 --saveFig 1 --batch_size 32 --shuffleDataTrain 1 --showFig 0 --modelSaveName tmpMod.json --weightSaveName tmpWeight.bin --noGPU 0 --paraSaveName parameters.txt --dataSplitScale 0.9 --spcLen 2000 --epochs 64 --optimizer optimizers.Adam(lr=0.001000) --outSaveFolderPath tmpOut```

For bybrid model, the command line becomes more complex, for example, using CNN-RNN model with all five feature groups:

```python running.py --dataType protein other other other other other --dataEncodingType dict other other other other other --dataTrainFilePaths examples/Druggableproteins/data/positive_train.txt examples/Druggableproteins/data/negative_train.txt examples/Druggableproteins/feature/positive_train_AAC.txt examples/Druggableproteins/feature/negative_train_AAC.txt examples/Druggableproteins/feature/positive_train_DC.txt examples/Druggableproteins/feature/negative_train_DC.txt examples/Druggableproteins/feature/positive_train_TC.txt examples/Druggableproteins/feature/negative_train_TC.txt examples/Druggableproteins/feature/positive_train_CTD.txt examples/Druggableproteins/feature/negative_train_CTD.txt examples/Druggableproteins/feature/positive_train_PSSM.txt examples/Druggableproteins/feature/negative_train_PSSM.txt --dataTrainLabel 1 0 1 0 1 0 1 0 1 0 1 0 --modelLoadFile examples/Druggableproteins/model/CNN_RNN_hybrid.py examples/Druggableproteins/model/Dense_AAC_hybrid.py examples/Druggableproteins/model/Dense_hybrid.py examples/Druggableproteins/model/Dense_TC_hybrid.py examples/Druggableproteins/model/Dense_CTD_hybrid.py examples/Druggableproteins/model/Dense_PSSM_hybrid.py --dataTrainModelInd 0 0 1 1 2 2 3 3 4 4 5 5 --dataTestModelInd 0 0 1 1 2 2 3 3 4 4 5 5 --savePrediction 1 --saveFig 1 --batch_size 32 --shuffleDataTrain 1 --showFig 0 --modelSaveName tmpMod.json --weightSaveName tmpWeight.bin --noGPU 0 --paraSaveName parameters.txt --dataSplitScale 0.9 --spcLen 2000 2000 2000 2000 2000 2000 --epochs 384 --optimizer tmpOut```

===========================================================================
If users want to use the test dataset instead of splitting, just remove "--dataSplitScale", then use the "--dataTestFilePaths" and "--dataTestLabel", for example:

```python running.py --dataType protein other other other other other --dataEncodingType dict other other other other other --dataTrainFilePaths examples/Druggableproteins/data/positive_train.txt examples/Druggableproteins/data/negative_train.txt examples/Druggableproteins/feature/positive_train_AAC.txt examples/Druggableproteins/feature/negative_train_AAC.txt examples/Druggableproteins/feature/positive_train_DC.txt examples/Druggableproteins/feature/negative_train_DC.txt examples/Druggableproteins/feature/positive_train_TC.txt examples/Druggableproteins/feature/negative_train_TC.txt examples/Druggableproteins/feature/positive_train_CTD.txt examples/Druggableproteins/feature/negative_train_CTD.txt examples/Druggableproteins/feature/positive_train_PSSM.txt examples/Druggableproteins/feature/negative_train_PSSM.txt --dataTrainLabel 1 0 1 0 1 0 1 0 1 0 1 0 --dataTestFilePaths examples/Druggableproteins/data/positive_test.txt examples/Druggableproteins/data/negative_test.txt examples/Druggableproteins/feature/positive_test_AAC.txt examples/Druggableproteins/feature/negative_test_AAC.txt examples/Druggableproteins/feature/positive_test_DC.txt examples/Druggableproteins/feature/negative_test_DC.txt examples/Druggableproteins/feature/positive_test_TC.txt examples/Druggableproteins/feature/negative_test_TC.txt examples/Druggableproteins/feature/positive_test_CTD.txt examples/Druggableproteins/feature/negative_test_CTD.txt examples/Druggableproteins/feature/positive_test_PSSM.txt examples/Druggableproteins/feature/negative_test_PSSM.txt --dataTestLabel 1 0 1 0 1 0 1 0 1 0 1 0 --modelLoadFile examples/Druggableproteins/model/CNN_RNN_hybrid.py examples/Druggableproteins/model/Dense_AAC_hybrid.py examples/Druggableproteins/model/Dense_hybrid.py examples/Druggableproteins/model/Dense_TC_hybrid.py examples/Druggableproteins/model/Dense_CTD_hybrid.py examples/Druggableproteins/model/Dense_PSSM_hybrid.py --dataTrainModelInd 0 0 1 1 2 2 3 3 4 4 5 5 --dataTestModelInd 0 0 1 1 2 2 3 3 4 4 5 5 --savePrediction 1 --saveFig 1 --batch_size 32 --shuffleDataTrain 1 --showFig 1 --modelSaveName tmpMod.json --weightSaveName tmpWeight.bin --noGPU 0 --paraSaveName parameters.txt --spcLen 2000 2000 2000 2000 2000 2000 --epochs 384 --optimizer optimizers.Adam(lr=0.000005) --outSaveFolderPath tmpOut```

The command line above is long, but users can reduce the number of feature groups by removing the related part.
